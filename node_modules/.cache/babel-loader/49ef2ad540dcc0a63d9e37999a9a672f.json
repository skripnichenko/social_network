{"ast":null,"code":"import { stopSubmit } from 'redux-form';\nimport { authAPI, securityAPI } from './../API/api';\nconst SET_USER_DATA = '/auth/SET_USER_DATA';\nconst GET_CAPTCHA_URL_SUCCESS = '/auth/GET_CAPTCHA_URL_SUCCESS';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false,\n  captchaUrl: null\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.payload,\n        isAuth: action.payload.isAuth\n      };\n\n    case GET_CAPTCHA_URL_SUCCESS:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n\n  ;\n};\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    userId,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getCaptchaUrlSuccess = captchaUrl => ({\n  type: GET_CAPTCHA_URL_SUCCESS,\n  payload: {\n    captchaUrl\n  }\n});\nexport const getAuthUserData = () => async dispatch => {\n  let response = await authAPI.me();\n\n  if (response.data.resultCode === 0) {\n    let {\n      id,\n      login,\n      email\n    } = response.data.data;\n    dispatch(setAuthUserData(id, email, login, true));\n  }\n\n  ;\n};\nexport const login = (email, password, rememberMe, captcha) => async dispatch => {\n  let response = await authAPI.login(email, password, rememberMe, captcha);\n\n  if (response.data.resultCode === 0) {\n    dispatch(getAuthUserData());\n  } else {\n    if (response.data.resultCode === 10) {\n      dispatch(getCaptchaUrl());\n    }\n\n    let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error';\n    dispatch(stopSubmit('login', {\n      _error: message\n    }));\n  }\n};\nexport const logout = () => async dispatch => {\n  let response = await authAPI.logout();\n\n  if (response.data.resultCode === 0) {\n    dispatch(setAuthUserData(null, null, null, false));\n  }\n\n  ;\n};\nexport const getCaptchaUrl = () => async dispatch => {\n  let response = await securityAPI.getCaptchaUrl();\n  const captcha = response.data.url;\n  dispatch(getCaptchaUrlSuccess(captcha));\n};\nexport default authReducer;","map":{"version":3,"sources":["/home/skripnichenko/my-app/src/redux/auth-reducer.js"],"names":["stopSubmit","authAPI","securityAPI","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","initialState","userId","email","login","isAuth","captchaUrl","authReducer","state","action","type","payload","setAuthUserData","getCaptchaUrlSuccess","getAuthUserData","dispatch","response","me","data","resultCode","id","password","rememberMe","captcha","getCaptchaUrl","message","messages","length","_error","logout","url"],"mappings":"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","sourcesContent":["import { stopSubmit } from 'redux-form';\nimport { authAPI, securityAPI } from './../API/api';\n\nconst SET_USER_DATA = '/auth/SET_USER_DATA';\nconst GET_CAPTCHA_URL_SUCCESS = '/auth/GET_CAPTCHA_URL_SUCCESS';\n\nlet initialState = {\n    userId: null,\n    email: null,\n    login: null,\n    isAuth: false,\n    captchaUrl: null\n};\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n\n        case SET_USER_DATA:\n            return { ...state, ...action.payload, isAuth: action.payload.isAuth };\n        case GET_CAPTCHA_URL_SUCCESS:\n            return {...state, ...action.payload}\n\n        default:\n            return state;\n    };\n};\nexport const setAuthUserData = (userId, email, login, isAuth) => ({ type: SET_USER_DATA, payload: { userId, email, login, isAuth } });\nexport const getCaptchaUrlSuccess = (captchaUrl) => ({ type: GET_CAPTCHA_URL_SUCCESS, payload: {captchaUrl}})\n\nexport const getAuthUserData = () => async (dispatch) => {\n    let response = await authAPI.me();\n    if (response.data.resultCode === 0) {\n        let { id, login, email } = response.data.data;\n        dispatch(setAuthUserData(id, email, login, true));\n    };\n\n}\n\nexport const login = (email, password, rememberMe, captcha) => async (dispatch) => {\n    let response = await authAPI.login(email, password, rememberMe, captcha);\n    if (response.data.resultCode === 0) {\n        dispatch(getAuthUserData());\n    } else {\n        if (response.data.resultCode === 10) {\n            dispatch(getCaptchaUrl());\n        }\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error';\n        dispatch(stopSubmit('login', { _error: message }));\n    }\n\n}\n\nexport const logout = () => async (dispatch) => {\n    let response = await authAPI.logout()\n    if (response.data.resultCode === 0) {\n        dispatch(setAuthUserData(null, null, null, false));\n    };\n}\n\nexport const getCaptchaUrl = () => async (dispatch) => {\n    let response = await securityAPI.getCaptchaUrl();\n    const captcha = response.data.url;\n    dispatch(getCaptchaUrlSuccess(captcha));\n}\n\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}