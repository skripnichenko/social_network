{"ast":null,"code":"// import { stopSubmit } from 'redux-form';\n// import { profileAPI, usersAPI } from './../API/api'\n// const ADD_POST = 'ADD-POST';\n// const SET_USER_PROFILE = 'SET_USER_PROFILE';\n// const SET_STATUS = 'SET_STATUS';\n// const SAVE_PHOTO_SUCCESS = 'SAVE_PHOTO_SUCCESS';\n// let initialState = {\n//     postsData: [\n//         { id: 1, message: 'Hi, how are you?', likesCount: 14 },\n//         { id: 2, message: 'It is my first post', likesCount: 3 }\n//     ],\n//     profile: null,\n//     status: '',\n// };\n// const profileReducer = (state = initialState, action) => {\n//     switch (action.type) {\n//         case ADD_POST:\n//             return {\n//                 ...state,\n//                 postsData: [...state.postsData, {\n//                     id: 5,\n//                     message: action.newPostText,\n//                     likesCount: 0,\n//                 }],\n//             }\n//         case SET_USER_PROFILE: {\n//             return { ...state, profile: action.profile }\n//         }\n//         case SAVE_PHOTO_SUCCESS: {\n//             return { ...state, profile: { ...state.profile, photos: action.photos } }\n//         }\n//         case SET_STATUS: {\n//             return { ...state, status: action.status }\n//         }\n//         default:\n//             return state;\n//     };\n// };\n// export const addPostActionCreator = (newPostText) => ({ type: ADD_POST, newPostText });\n// export const setUserProfile = (profile) => ({ type: SET_USER_PROFILE, profile })\n// export const setStatus = (status) => ({ type: SET_STATUS, status });\n// export const savePhotoSuccess = (photos) => ({ type: SAVE_PHOTO_SUCCESS, photos });\n// export const getUserProfile = (userId) => async (dispatch) => {\n//     const response = await usersAPI.getProfile(userId);\n//     dispatch(setUserProfile(response.data));\n// };\n// export const getStatus = (userId) => async (dispatch) => {\n//     const response = await profileAPI.getStatus(userId);\n//     dispatch(setStatus(response.data));\n// };\n// export const updateStatus = (status) => async (dispatch) => {\n//     try {\n//         const response = await profileAPI.updateStatus(status);\n//         if (response.data.resultCode === 0) {\n//             dispatch(setStatus(status));\n//         };\n//     } catch (error) {\n//         alert('Some error occured')\n//     }\n// };\n// export const savePhoto = (file) => async (dispatch) => {\n//     const response = await profileAPI.savePhoto(file);\n//     if (response.data.resultCode === 0) {\n//         dispatch(savePhotoSuccess(response.data.data.photos));\n//     };\n// };\n// export const saveProfile = (profile) => async (dispatch, getState) => {\n//     const userId = getState().auth.userId;\n//     const response = await profileAPI.saveProfile(profile);\n//     if (response.data.resultCode === 0) {\n//         dispatch(getUserProfile(userId));\n//     } else {\n//         dispatch(stopSubmit('edit-profile', { _error: response.data.messages }));\n//         return Promise.reject(response.data.messages);\n//     }\n// };\n// export default profileReducer;","map":{"version":3,"sources":["/home/skripnichenko/social_network/src/redux/profile-reducer.js"],"names":[],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import { stopSubmit } from 'redux-form';\n// import { profileAPI, usersAPI } from './../API/api'\n\n// const ADD_POST = 'ADD-POST';\n// const SET_USER_PROFILE = 'SET_USER_PROFILE';\n// const SET_STATUS = 'SET_STATUS';\n// const SAVE_PHOTO_SUCCESS = 'SAVE_PHOTO_SUCCESS';\n\n// let initialState = {\n//     postsData: [\n//         { id: 1, message: 'Hi, how are you?', likesCount: 14 },\n//         { id: 2, message: 'It is my first post', likesCount: 3 }\n//     ],\n//     profile: null,\n//     status: '',\n// };\n\n// const profileReducer = (state = initialState, action) => {\n//     switch (action.type) {\n//         case ADD_POST:\n//             return {\n//                 ...state,\n//                 postsData: [...state.postsData, {\n//                     id: 5,\n//                     message: action.newPostText,\n//                     likesCount: 0,\n//                 }],\n//             }\n//         case SET_USER_PROFILE: {\n//             return { ...state, profile: action.profile }\n//         }\n//         case SAVE_PHOTO_SUCCESS: {\n//             return { ...state, profile: { ...state.profile, photos: action.photos } }\n//         }\n//         case SET_STATUS: {\n//             return { ...state, status: action.status }\n//         }\n//         default:\n//             return state;\n//     };\n// };\n\n\n\n// export const addPostActionCreator = (newPostText) => ({ type: ADD_POST, newPostText });\n// export const setUserProfile = (profile) => ({ type: SET_USER_PROFILE, profile })\n// export const setStatus = (status) => ({ type: SET_STATUS, status });\n// export const savePhotoSuccess = (photos) => ({ type: SAVE_PHOTO_SUCCESS, photos });\n\n\n\n// export const getUserProfile = (userId) => async (dispatch) => {\n//     const response = await usersAPI.getProfile(userId);\n//     dispatch(setUserProfile(response.data));\n// };\n\n// export const getStatus = (userId) => async (dispatch) => {\n//     const response = await profileAPI.getStatus(userId);\n//     dispatch(setStatus(response.data));\n// };\n\n// export const updateStatus = (status) => async (dispatch) => {\n//     try {\n//         const response = await profileAPI.updateStatus(status);\n//         if (response.data.resultCode === 0) {\n//             dispatch(setStatus(status));\n//         };\n//     } catch (error) {\n//         alert('Some error occured')\n//     }\n\n// };\n\n// export const savePhoto = (file) => async (dispatch) => {\n\n//     const response = await profileAPI.savePhoto(file);\n//     if (response.data.resultCode === 0) {\n//         dispatch(savePhotoSuccess(response.data.data.photos));\n//     };\n// };\n\n// export const saveProfile = (profile) => async (dispatch, getState) => {\n//     const userId = getState().auth.userId;\n//     const response = await profileAPI.saveProfile(profile);\n//     if (response.data.resultCode === 0) {\n//         dispatch(getUserProfile(userId));\n//     } else {\n//         dispatch(stopSubmit('edit-profile', { _error: response.data.messages }));\n//         return Promise.reject(response.data.messages);\n//     }\n// };\n\n// export default profileReducer;"]},"metadata":{},"sourceType":"module"}